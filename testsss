import pytest
from unittest.mock import MagicMock, patch
import io
from your_module import DataMergeFilesHTMLUseCase  # Importe a classe corretamente do seu código

class TestDataMergeFilesHTMLUseCase:
    
    @pytest.fixture
    def use_case(self):
        # Setup: Criação de uma instância da sua classe
        return DataMergeFilesHTMLUseCase()

    @patch('your_module.Environment.get_template')  # Mock do carregamento de template no Jinja2
    @patch('your_module.getcwd')  # Mock da função os.getcwd()
    def test_init(self, mock_getcwd, mock_get_template, use_case):
        # Simula valores retornados pelos mocks
        mock_getcwd.return_value = "/mock/path"
        mock_get_template.return_value = MagicMock()  # Mock do template

        # Testa se o init foi configurado corretamente
        assert use_case.path_templates == '/mock/path/domain/use_cases/templates'
        assert use_case.path_logo_1 == '/mock/path/domain/use_cases/templates/logo_1.png'
        assert use_case.path_logo_2 == '/mock/path/domain/use_cases/templates/logo_2.png'

    @patch('your_module.datetime')  # Mock do datetime
    @patch('your_module.Environment.get_template')  # Mock do carregamento de template no Jinja2
    def test_build_html_active_annotations(self, mock_get_template, mock_datetime, use_case):
        # Mock para a função datetime
        mock_datetime.now.return_value.strftime.return_value = "12/09/2024"
        
        json_data = {
            "documento": "doc1",
            "detalhes": "det1",
            "grafias": "graf1"
        }
        
        # Simula o render dos templates no Jinja2
        mock_template = MagicMock()
        mock_template.render.return_value = "HTML Rendered"
        mock_get_template.return_value = mock_template

        # Chama o método que estamos testando
        result = use_case.build_html_active_annotations(json_data)
        
        # Verifica se o render foi chamado com os parâmetros corretos
        mock_template.render.assert_called_once_with(
            documento='doc1',
            detalhes='det1',
            grafias='graf1',
            now="12/09/2024"
        )
        
        # Verifica o resultado final
        assert result == "HTML Rendered"
    
    @patch('your_module.pisa.CreatePDF')  # Mock do pisa.CreatePDF
    def test_convert_html_to_pdf_success(self, mock_create_pdf, use_case):
        input_html = "<html><body>Test</body></html>"
        
        # Mock do buffer PDF
        pdf_buffer = io.BytesIO()
        mock_create_pdf.return_value = (True, pdf_buffer)

        # Chama o método de conversão
        result = use_case.convert_html_to_pdf(input_html)
        
        # Verifica se o método retornou o buffer corretamente
        assert result == pdf_buffer
    
    @patch('your_module.pisa.CreatePDF')  # Mock do pisa.CreatePDF
    def test_convert_html_to_pdf_failure(self, mock_create_pdf, use_case):
        input_html = "<html><body>Test</body></html>"
        
        # Simula erro na conversão do PDF
        mock_create_pdf.return_value = (False, None)

        # Chama o método de conversão
        result = use_case.convert_html_to_pdf(input_html)
        
        # Verifica se o resultado foi None em caso de erro
        assert result is None
